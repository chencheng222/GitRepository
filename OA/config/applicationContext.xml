<?xml version="1.0" encoding="UTF-8"?>

<!--
  - Application context definition for JPetStore's business layer.
  - Contains bean references to the transaction manager and to the DAOs in
  - dataAccessContext-local/jta.xml (see web.xml's "contextConfigLocation").
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:context="http://www.springframework.org/schema/context"
		
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 
			1.搭建Spring的开发环境
				1.1:添加配置文件，和对应的spring-3.2-core.jar
				1.2:创建Date对象，如果成功Spring的环境ok
				1.3:通过基于Spring Junit测试实例化Date
				
			2.搭建Hibernate开发环境
				2.1:添加配置文件，和对应的hibernate-3.6.jar+mysql驱动包
				2.2:分析com.cc.shop.util.HibernateSessionFactory作用
				2.3:通过表逆向生成model(entity)、orm文件
				2.4:创建Service,通过New的方式执行数据的入库,在javaEE6中，会出现Unable to get the default Bean Validation factory异常。
					解决方案:在hibernate配置文件中:<property name="javax.persistence.validation.mode">none</property>
					
			3.Spring与Hibernate整合(采用AOP容器来管理事务，实现申明式事务)	
				3.1:添加对应的spring-3.2-aop.jar spring-3.2-persistence.jar c3p0.jar
				3.2:配置数据源com.mchange.v2.c3p0.ComboPooledDataSource
				3.3:采用LocalSessionFactoryBean取代HibernateTemplate
				3.4:配置事务管理器来管理sessionFactory,这样所有的Session将会有声明式事务
				3.5:配置advice(通知),通知是指定了哪些方法指定了什么事务模式
				3.6:配置AOP切面表达式
				3.7:让Service交给Spring管理,并且依赖sessionFactory,如果能插入数据，则表示声明事务OK
				
			4.搭建Struts开发环境
				4.1:添加配置文件，和对应的Struts-2.3.jar包，并且在web.xml中配置org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter过滤器
				4.2:创建Action,并且配置到Struts.xml中
				4.3:通过Jsp访问Action,如果Action可以访问,则环境OK

				test.......
	 -->
	
	<!-- 注解扫描 -->
	<context:component-scan base-package="com.cc.oa" />

	<!--扫描jdbc配置文件-->
	<context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

	<!-- 将数据库配置信息交由Spring容器管理 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${jdbcUrl}" />
		<property name="user" value="${user}" />
		<property name="password" value="${password}" />
	</bean>

	<!-- 配置会话管理器，依赖dataSource -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/>
		
		<!-- 其他配置
		初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3
		<property name="initialPoolSize" value="3"></property>
		连接池中保留的最小连接数。Default: 3
		<property name="minPoolSize" value="3"></property>
		连接池中保留的最大连接数。Default: 15
		<property name="maxPoolSize" value="5"></property>
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
		<property name="acquireIncrement" value="3"></property>
		控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
		<property name="maxStatements" value="8"></property>
		maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0
		<property name="maxStatementsPerConnection" value="5"></property>
		最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
		<property name="maxIdleTime" value="1800"></property> -->
	</bean>
	
	<!-- 配置事物管理器，依赖于sessionFactory -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- （采用基于注解的方式） -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- <tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>需要事务
			<tx:method name="update*" propagation="REQUIRED"/>需要事务
			<tx:method name="delete*" propagation="REQUIRED"/>需要事务
			<tx:method name="*" propagation="SUPPORTS"/>支持(事务可有可无)
		</tx:attributes>
	</tx:advice> -->
	
	<!-- <aop:config>
		配置哪些包需要切入事物
		<aop:pointcut expression="execution(* com.cc.oa.service.impl.*.*(..))" id="pointcut" />
		通知+切面表达式,才是完整的切入路径
		<aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
	</aop:config> -->
</beans>
